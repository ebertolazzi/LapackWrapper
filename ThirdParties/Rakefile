require "rake"
require_relative "../Rakefile_common.rb"

task :default => [:install_osx] do
end

desc "install 3rd parties for OSX"
task :install_osx do
  FileUtils.cd "SuperLU"
  sh "rake install_osx"
  FileUtils.cd ".."
end

desc "install 3rd parties for LINUX"
task :install_linux do
  FileUtils.cd "SuperLU"
  sh "rake install_linux"
  FileUtils.cd ".."
end

desc "install 3rd parties for WINDOWS"
task :install_win, [:year, :bits] do |t,args|
  args.with_defaults(:year => "2017", :bits => "x64" )
  FileUtils.cd "SuperLU"
  sh "rake install_win[#{args.year},#{args.bits}]"
  FileUtils.cd "../OpenBlas"
  sh "rake install_win[#{args.year},#{args.bits}]"
  FileUtils.cd ".."
end

desc "clean 3rd parties for OSX"
task :clean_osx do
  FileUtils.cd "SuperLU"
  sh "rake clean_osx"
  FileUtils.cd "../OpenBlas"
  sh "rake clean_osx"
  FileUtils.cd ".."
end

desc "clean 3rd parties for LINUX"
task :clean_linux do
  FileUtils.cd "SuperLU"
  sh "rake clean_linux"
  FileUtils.cd "../OpenBlas"
  sh "rake clean_linux"
  FileUtils.cd ".."
  arch = `uname -m`.chomp #elimina a capo
  begin
    dir_openblas = "/usr/local/include/openblas"
    cmd          = "NOPE"
    unless Dir.exist?( dir_openblas ) then
      ###FileUtils.mkdir_p "/usr/local/include"
      sh "sudo mkdir -p /usr/local/include"
      sys_openblas = "/usr/include/#{arch}-linux-gcc"
      if Dir.exist?( sys_openblas ) then
        ###FileUtils.ln_sf sys_openblas, dir_openblas, force: true
        cmd "sudo ln -s #{sys_openblas} #{dir_openblas}"
        sh cmd
      else
        sys_openblas = "/usr/include/#{arch}-linux-gnu"
        if Dir.exist?( sys_openblas ) then
          ###FileUtils.ln_sf sys_openblas, dir_openblas, force: true
          cmd = "sudo ln -s #{sys_openblas} #{dir_openblas}"
          sh cmd
        else
          cmd = "(cant find system openblas)"
          throw
        end
      end
    else
      cmd = "(#{dir_openblas} exists)"
      throw
    end
  rescue
    puts "--------------------------------------\n".yellow
    puts "--------------------------------------\n".yellow
    puts "--------------------------------------\n".yellow
    puts "Failed #{cmd}".yellow
    puts "lapack may fails".yellow
    puts "press return to continue".yellow
    input = STDIN.gets.strip
  end
end

desc "clean 3rd parties for WINDOWS"
task :clean_win do
  FileUtils.cd "SuperLU"
  sh "rake clean_win"
  FileUtils.cd "../OpenBlas"
  sh "rake clean_win"
  FileUtils.cd ".."
end
