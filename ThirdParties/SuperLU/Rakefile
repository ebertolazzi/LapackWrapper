require_relative "../../cmake_utils/Rakefile_common.rb"

task :default => [:install_osx]

VER='5.3.0'
FILENAME="superlu-#{VER}.tar.gz"

desc "download superlu-#{VER}.tar.gz lib"
task :download do
  if File.exists?(FILENAME) then
    url_download( "https://github.com/xiaoyeli/superlu/archive/refs/tags/v#{VER}.tar.gz", FILENAME )
  end
end

if COMPILE_DEBUG then
  endname = "_static_debug"
else
  endname = "_static"
end

def ChangeOnFile( file, text_to_replace, text_to_put_in_place )
  text= File.read file
  File.open(file, 'w+'){|f| f << text.gsub(text_to_replace, text_to_put_in_place)}
end

def extract_and_prepare()
  extract_tgz(FILENAME)
  FileUtils.rm_rf 'superlu'
  FileUtils.mv    'superlu-'+VER, 'superlu'

  ChangeOnFile("./superlu/SRC/creadrb.c","#ifdef DEBUG","#ifdef DISABLED_DEBUG")
  ChangeOnFile("./superlu/SRC/creadhb.c","#ifdef DEBUG","#ifdef DISABLED_DEBUG")
  ChangeOnFile("./superlu/SRC/zreadrb.c","#ifdef DEBUG","#ifdef DISABLED_DEBUG")
  ChangeOnFile("./superlu/SRC/zreadhb.c","#ifdef DEBUG","#ifdef DISABLED_DEBUG")

  FileUtils.rm_rf 'build'
  FileUtils.mkdir 'build'
end

def extract_and_prepare_and_compile( os )
  extract_and_prepare()
  FileUtils.cd    'build'
  if COMPILE_DEBUG then
    sh 'cmake -DCMAKE_BUILD_TYPE:VAR=Debug -DCMAKE_INSTALL_PREFIX:PATH=../lib --loglevel=STATUS ..'
    sh 'cmake --build . --clean-first --config Debug --target install '+PARALLEL+QUIET
    FileUtils.mv '../lib/lib/libsuperlu.a', "../lib/lib/libsuperlu_#{os}_static_debug.a"
  else
    sh 'cmake -DCMAKE_BUILD_TYPE:VAR=Release -DCMAKE_INSTALL_PREFIX:PATH=../lib --loglevel=STATUS ..'
    sh 'cmake --build . --clean-first --config Release --target install '+PARALLEL+QUIET
    FileUtils.mv '../lib/lib/libsuperlu.a', "../lib/lib/libsuperlu_#{os}_static.a"
  end
  FileUtils.cd '..'
end

desc "build superlu lib for OSX"
task :build_osx => [:download] do
  if File.exists?("lib/lib/libsuperlu_osx#{endname}.a") then
    puts "SuperLU already compiled"
  else
    extract_and_prepare_and_compile("osx")
  end
  Rake::Task[:install_common].invoke()
end

desc "build superlu lib for LINUX"
task :build_linux => [:download] do
  if File.exists?("lib/lib/libsuperlu_linux#{endname}.a") then
    puts "SuperLU already compiled"
  else
    extract_and_prepare_and_compile("linux")
  end
  Rake::Task[:install_common].invoke()
end

desc "build superlu lib for MINGW"
task :build_mingw => [:download] do
  if File.exists?("lib/lib/libsuperlu_mingw#{endname}.a") then
    puts "SuperLU already compiled"
  else
    extract_and_prepare_and_compile("mingw")
  end
  Rake::Task[:install_common].invoke()
end

desc "build superlu lib for WINDOWS"
task :build_win, [:year, :bits] => [:download] do |t, args|
  args.with_defaults( :year => "2017", :bits => "x64" )

  if File.exists?("lib/lib/libsuperlu_win_#{args.bits}#{endname}.lib") then
    puts "SuperLU already compiled"
  else
    extract_and_prepare()

    FileUtils.rm_rf   "lib"
    FileUtils.mkdir_p "lib/lib"
    FileUtils.mkdir_p "lib/include"

    FileUtils.cd 'build'

    tmp = cmake_generation_command(args.bits,args.year)

    if COMPILE_DEBUG then
      sh tmp + ' -DCMAKE_BUILD_TYPE:VAR=Debug --loglevel=STATUS ..'
      sh 'cmake --build . --clean-first --config Debug --target install '+PARALLEL+QUIET
      FileUtils.mv '../lib/lib/superlu.lib', "../lib/lib/superlu_win_#{args.bits}_static_debug.lib"
    else
      sh tmp + ' -DCMAKE_BUILD_TYPE:VAR=Release --loglevel=STATUS ..'
      sh 'cmake --build . --clean-first --config Release --target install '+PARALLEL+QUIET
      FileUtils.mv '../lib/lib/superlu.lib', "../lib/lib/superlu_win_#{args.bits}_static.lib"
    end
    FileUtils.cd '..'
  end
  Rake::Task[:install_common].invoke()
end

task :install_common do
  prefix = "../../lib3rd"
  puts "SuperLU copy files to #{prefix}"
  FileUtils.rm_rf   "#{prefix}/include/superlu"
  FileUtils.mkdir_p "#{prefix}/include/superlu"
  FileUtils.mkdir_p "#{prefix}/lib"
  Dir['lib/include/*'].each do |f|
    puts "Copy header #{f}".green
    FileUtils.cp f, prefix+'/include/superlu/'+File.basename(f)
  end
  Dir['lib/include/*'].each do |f|
    puts "Copy header #{f}".green
    FileUtils.cp f, prefix+'/include/superlu/'+File.basename(f)
  end
  Dir['lib/lib/*.*'].each do |f|
    puts "Copy static lib #{f}".green
    FileUtils.cp f, prefix+'/lib/'+File.basename(f)
  end
end

desc "install locally superlu lib for LINUX"
task :install_linux => :build_linux do
end

desc "install locally superlu lib for OSX"
task :install_osx => :build_osx do
end

desc "install locally superlu lib for MINGW"
task :install_mingw => :build_mingw do
end

desc "install locally superlu lib for windows"
task :install_win, [:year, :bits] do |t, args|
  args.with_defaults(:year => "2017", :bits => "x64" )
  Rake::Task[:build_win].invoke(args.year, args.bits)
end

desc "clean superlu for LINUX"
task :clean_linux do
  FileUtils.rm_rf "lib"
  FileUtils.rm_rf "superlu"
end

desc "clean superlu for OSX"
task :clean_osx do
  FileUtils.rm_rf "lib"
  FileUtils.rm_rf "superlu"
end

desc "clean superlu for MINGW"
task :clean_mingw do
  FileUtils.rm_rf "lib"
  FileUtils.rm_rf "superlu"
end

desc "clean superlu for WINDOWS"
task :clean_win do
  FileUtils.rm_rf "lib"
  Dir['vs_*'].each do |f|
    FileUtils.rm_rf f
  end
end
